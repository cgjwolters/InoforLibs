/* ---------------------------------------------------------------------- */
/* --------- Element Intersection Points -------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* -------------------- Copyright Alcoa Drunen NL, Oct 1996 ------------- */
/* ---------------------------- (Inofor Hoek Aut BV, C. Wolters) -------- */
/* ---------------------------------------------------------------------- */

#include "Isect.h"

namespace Ino
{

/* ---------------------------------------------------------------------- */
/* ------- Assignment --------------------------------------------------- */
/* ---------------------------------------------------------------------- */

Isect_Single& Isect_Single::operator=(const Isect_Single& src)
{
  Tg     = src.Tg;
  Par    = src.Par;
  Curve  = src.Curve;

  return *this;
}

/* ---------------------------------------------------------------------- */
/* ------- Constructor -------------------------------------------------- */
/* ---------------------------------------------------------------------- */

Isect_Pair::Isect_Pair(const Vec3& p,
                       const Vec3& tg1, double par1, double curve1,
                       const Vec3& tg2, double par2, double curve2)
: isp(p), fst(tg1, par1, curve1), lst(tg2, par2, curve2),
  P(isp), First(fst), Last(lst)
{
}

/* ---------------------------------------------------------------------- */
/* ------- Copy Constructor --------------------------------------------- */
/* ---------------------------------------------------------------------- */

Isect_Pair::Isect_Pair(const Isect_Pair& cp)
: isp(cp.isp), fst(cp.fst), lst(cp.lst),
  P(isp), First(fst), Last(lst)
{
}

/* ---------------------------------------------------------------------- */
/* ------- Assignment operator ------------------------------------------ */
/* ---------------------------------------------------------------------- */

Isect_Pair& Isect_Pair::operator=(const Isect_Pair& src)
{
  isp = src.isp;
  fst = src.fst;
  lst = src.lst;

  return *this;
}

/* ---------------------------------------------------------------------- */
/* ------- Swap First and Last ------------------------------------------ */
/* ---------------------------------------------------------------------- */

void Isect_Pair::Swap()
{ 
  Isect_Single hold(fst);
  fst = lst; lst = hold;
}

/* ---------------------------------------------------------------------- */
/* ------- Comparator for Isect_Pair ------------------------------------ */
/* ---------------------------------------------------------------------- */

int Isect_Cmp::Compare(const Isect_Pair& p1, const Isect_Pair& p2)
{
  if      (p1.First.Par < p2.First.Par - Vec2::IdentDist) return -1;
  else if (p1.First.Par > p2.First.Par + Vec2::IdentDist) return 1;
  else if (p1.Last.Par  < p2.Last.Par) return -1;
  return 1;
}

} // namespace Ino

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
