/* ---------------------------------------------------------------------- */
/* ------- Doubly Linked List Template ---------------------------------- */
/* ------- Template Instantiations -------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ------------- Copyright Inofor Hoek Aut BV 1996, C. Wolters ---------- */
/* ---------------------------------------------------------------------- */

#ifndef IT_DLIST_INC
#error Include it_dlist.h instead
#endif

/* ---------------------------------------------------------------------- */
/* ------ List head ----------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
IT_D_List<T,Alloc>::IT_D_List(const IT_D_List<T,Alloc>& clst)
  : d_head()
{
  Begin().Copy_From(clst.Begin(),clst.End());
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
IT_D_List<T,Alloc>& IT_D_List<T,Alloc>::operator=
                                           (const IT_D_List<T,Alloc>& clst)
{
  Delete();
  Begin().Copy_From(clst.Begin(),clst.End());

  return *this;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
void IT_D_List<T,Alloc>::Delete()
{
  IT_D_Cursor<T,Alloc> c(*this);
  while (c) c.Delete();
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
IT_D_C_Cursor<T,Alloc> IT_D_List<T,Alloc>::End() const
{
  IT_D_C_Cursor<T,Alloc> c(*this);
  return c.To_End();
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
IT_D_C_Cursor<T,Alloc> IT_D_List<T,Alloc>::Last() const
{
  IT_D_C_Cursor<T,Alloc> c(*this);
  return c.To_Last();
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
IT_D_Cursor<T,Alloc> IT_D_List<T,Alloc>::End()
{
  IT_D_Cursor<T,Alloc> c(*this);
  return c.To_End();
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
IT_D_Cursor<T,Alloc> IT_D_List<T,Alloc>::Last()
{
  IT_D_Cursor<T,Alloc> c(*this);
  return c.To_Last();
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

// template <class T, class Alloc>
// bool IT_D_List<T,Alloc>::Pop_Front(T& t)
// {
  // IT_D_Cursor<T,Alloc> c(*this);

  // if (!c) return false;
  // t = *c;

  // return c.Delete();
// }

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

// template <class T, class Alloc>
// bool IT_D_List<T,Alloc>::Pop_Back(T& t)
// {
  // IT_D_Cursor<T,Alloc> c(Last());

  // if (!c) return false;
  // t = *c;

  // return c.Delete();
// }

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
void IT_D_List<T,Alloc>::Move_To(IT_D_List<T,Alloc>& target)
{
  target.Delete();
  move_to(target);
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
void IT_D_List<T,Alloc>::Append_To(IT_D_List<T,Alloc>& target)
{
  IT_D_Cursor<T,Alloc> b(*this);
  IT_D_Cursor<T,Alloc> e(*this);  e.To_End();
  IT_D_Cursor<T,Alloc> d(target); d.To_End();

  d.Re_Insert(b,e);
}

/* ---------------------------------------------------------------------- */
/* ----- Const Cursor --------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
IT_D_C_Cursor<T,Alloc>&
 IT_D_C_Cursor<T,Alloc>::operator=
       (const IT_D_C_Cursor<T,Alloc>& src)
{
  d_curs::operator=(src);
  return *this;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
IT_D_C_Cursor<T,Alloc> IT_D_C_Cursor<T,Alloc>::operator++(int)
{
  IT_D_C_Cursor<T,Alloc> c(*this); 
  advance();
  return c;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
IT_D_C_Cursor<T,Alloc> IT_D_C_Cursor<T,Alloc>::operator--(int)
{
  IT_D_C_Cursor<T,Alloc> c(*this);
  backup();
  return c;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
const T* IT_D_C_Cursor<T,Alloc>::Pred() const
{
  const IT_D_Item<T> *it = (IT_D_Item<T> *)pred();
  if (it) return &it->m;
  else return NULL;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
const T* IT_D_C_Cursor<T,Alloc>::Self() const
{
  const IT_D_Item<T> *it = (IT_D_Item<T> *)self();
  if (it) return &it->m;
  else return NULL;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
const T* IT_D_C_Cursor<T,Alloc>::Succ() const
{
  const IT_D_Item<T> *it = (IT_D_Item<T> *)succ();
  if (it) return &it->m;
  else return NULL;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
const T& IT_D_C_Cursor<T,Alloc>::operator *() const
{
  const IT_D_Item<T> *it = (IT_D_Item<T> *)self();
  if (it) return it->m;
  else {
    ill_deref();
    return *(const T*)NULL;
  }
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
const T* IT_D_C_Cursor<T,Alloc>::operator->() const
{
  const IT_D_Item<T> *it = (IT_D_Item<T> *)self();
  if (it) return &it->m;
  else {
    ill_deref();
    return NULL;
  }
}

/* ---------------------------------------------------------------------- */
/* ------- Cursor ------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
IT_D_Cursor<T,Alloc>&
  IT_D_Cursor<T,Alloc>::operator=(const IT_D_Cursor<T,Alloc>& src)
{
  crs = src.crs;
  return *this;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
IT_D_Cursor<T,Alloc> IT_D_Cursor<T,Alloc>::operator++(int)
{
  IT_D_Cursor<T,Alloc> c(*this);
  crs.advance();
  return c;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
IT_D_Cursor<T,Alloc> IT_D_Cursor<T,Alloc>::operator--(int)
{
  IT_D_Cursor<T,Alloc> c(*this);
  crs.backup();
  return c;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
T* IT_D_Cursor<T,Alloc>::Pred() const
{
  IT_D_Item<T> *it = (IT_D_Item<T> *)crs.pred();
  if (it) return &it->m;
  else return NULL;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
T* IT_D_Cursor<T,Alloc>::Self() const
{
  IT_D_Item<T> *it = (IT_D_Item<T> *)crs.self();
  if (it) return &it->m;
  else return NULL;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
T* IT_D_Cursor<T,Alloc>::Succ() const
{
  IT_D_Item<T> *it = (IT_D_Item<T> *)crs.succ();
  if (it) return &it->m;
  else return NULL;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
T& IT_D_Cursor<T,Alloc>::operator *() const
{
  IT_D_Item<T> *it = (IT_D_Item<T> *)crs.self();
  if (it) return it->m;
  else {
   crs.ill_deref();
   return *(T*)NULL;
  }
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
T* IT_D_Cursor<T,Alloc>::operator->() const
{
  IT_D_Item<T> *it = (IT_D_Item<T> *)crs.self();
  if (it) return &it->m;
  else {
    crs.ill_deref();
    return NULL;
  }
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
bool IT_D_Cursor<T,Alloc>::Copy_From(const IT_D_C_Cursor<T,Alloc>& from)
{
  return from && crs.insert(new (Alloc::New()) IT_D_Item<T>(*from),1);
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
bool IT_D_Cursor<T,Alloc>::Copy_From
                                    (const IT_D_C_Cursor<T,Alloc>& from,
                                     const IT_D_C_Cursor<T,Alloc>& upto)
{
  if (!from || from == upto ||
       from.Container() != upto.Container() ) return false;

  IT_D_C_Cursor<T,Alloc> c(upto);

  do {
    --c; if (!c) c.To_Last();

    if (!crs.insert(new (Alloc::New()) IT_D_Item<T>(*c),1)) return false;

  } while (c != from);

  return true;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
bool IT_D_Cursor<T,Alloc>::Insert(const T& a)
{
  return crs.insert(new (Alloc::New()) IT_D_Item<T>(a),1);
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
bool IT_D_Cursor<T,Alloc>::Delete()
{
  IT_D_Item<T> *it = (IT_D_Item<T> *)crs.remove();
  if (!it) return false;

  it->~IT_D_Item<T>();
  Alloc::Free(it);

  return true;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

template <class T, class Alloc>
bool IT_D_Cursor<T,Alloc>::Delete(const IT_D_Cursor<T,Alloc>& upto)
{
  if (!crs || crs == upto.crs ||
                            Container() != upto.Container()) return false;

  while (crs != upto.crs) {
    IT_D_Item<T> *it = (IT_D_Item<T> *)crs.remove();
 
    if (it) {
      it->~IT_D_Item<T>();
      Alloc::Free(it);
    }
  }

  return true;
}

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
